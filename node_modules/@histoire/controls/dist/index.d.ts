export declare const HstButton: import("@histoire/vendors/vue").DefineComponent<{
    color: {
        type: import("@histoire/vendors/vue").PropType<"default" | "flat" | "primary">;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    color: {
        type: import("@histoire/vendors/vue").PropType<"default" | "flat" | "primary">;
    };
}>>, {}>;
export declare const HstButtonGroup: import("@histoire/vendors/vue").DefineComponent<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<string>;
        required: true;
    };
    options: {
        type: import("@histoire/vendors/vue").PropType<import("./types").HstControlOption[]>;
        required: true;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
    "update:modelValue": (value: string) => void;
}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<string>;
        required: true;
    };
    options: {
        type: import("@histoire/vendors/vue").PropType<import("./types").HstControlOption[]>;
        required: true;
    };
}>> & {
    "onUpdate:modelValue"?: (value: string) => any;
}, {}>;
export declare const HstCheckbox: import("@histoire/vendors/vue").DefineComponent<{
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<boolean>;
        required: true;
    };
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
    'update:modelValue': (newValue: boolean) => true;
}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<boolean>;
        required: true;
    };
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
}>> & {
    "onUpdate:modelValue"?: (newValue: boolean) => any;
}, {}>;
export declare const HstCheckboxList: import("@histoire/vendors/vue").DefineComponent<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<string[]>;
        required: true;
    };
    options: {
        type: import("@histoire/vendors/vue").PropType<import("./types").HstControlOption[]>;
        required: true;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
    "update:modelValue": (value: string[]) => void;
}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<string[]>;
        required: true;
    };
    options: {
        type: import("@histoire/vendors/vue").PropType<import("./types").HstControlOption[]>;
        required: true;
    };
}>> & {
    "onUpdate:modelValue"?: (value: string[]) => any;
}, {}>;
export declare const HstText: import("@histoire/vendors/vue").DefineComponent<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<string>;
        required: true;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
    'update:modelValue': (newValue: string) => true;
}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<string>;
        required: true;
    };
}>> & {
    "onUpdate:modelValue"?: (newValue: string) => any;
}, {}>;
export declare const HstNumber: import("@histoire/vendors/vue").DefineComponent<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<number>;
        required: true;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
    'update:modelValue': (newValue: number) => true;
}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<number>;
        required: true;
    };
}>> & {
    "onUpdate:modelValue"?: (newValue: number) => any;
}, {}>;
export declare const HstSlider: import("@histoire/vendors/vue").DefineComponent<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<number>;
        required: true;
    };
    min: {
        type: import("@histoire/vendors/vue").PropType<number>;
        required: true;
    };
    max: {
        type: import("@histoire/vendors/vue").PropType<number>;
        required: true;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
    'update:modelValue': (newValue: number) => true;
}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<number>;
        required: true;
    };
    min: {
        type: import("@histoire/vendors/vue").PropType<number>;
        required: true;
    };
    max: {
        type: import("@histoire/vendors/vue").PropType<number>;
        required: true;
    };
}>> & {
    "onUpdate:modelValue"?: (newValue: number) => any;
}, {}>;
export declare const HstTextarea: import("@histoire/vendors/vue").DefineComponent<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<string>;
        required: true;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
    'update:modelValue': (newValue: string) => true;
}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<string>;
        required: true;
    };
}>> & {
    "onUpdate:modelValue"?: (newValue: string) => any;
}, {}>;
export declare const HstSelect: import("@histoire/vendors/vue").DefineComponent<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<string>;
        required: true;
    };
    options: {
        type: import("@histoire/vendors/vue").PropType<Record<string, any> | string[] | import("./types").HstControlOption[]>;
        required: true;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
    "update:modelValue": (value: any) => void;
}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<string>;
        required: true;
    };
    options: {
        type: import("@histoire/vendors/vue").PropType<Record<string, any> | string[] | import("./types").HstControlOption[]>;
        required: true;
    };
}>> & {
    "onUpdate:modelValue"?: (value: any) => any;
}, {}>;
export declare const HstColorShades: import("@histoire/vendors/vue").DefineComponent<{
    shades: {
        type: import("@histoire/vendors/vue").PropType<Record<string, any>>;
        required: true;
    };
    getName: {
        type: import("@histoire/vendors/vue").PropType<(key: string, color: string) => string>;
    };
    search: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    shades: {
        type: import("@histoire/vendors/vue").PropType<Record<string, any>>;
        required: true;
    };
    getName: {
        type: import("@histoire/vendors/vue").PropType<(key: string, color: string) => string>;
    };
    search: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
}>>, {}>;
export declare const HstTokenList: import("@histoire/vendors/vue").DefineComponent<{
    tokens: {
        type: import("@histoire/vendors/vue").PropType<Record<string, string | number | any[] | Record<string, any>>>;
        required: true;
    };
    getName: {
        type: import("@histoire/vendors/vue").PropType<(key: string, value: string | number | any[] | Record<string, any>) => string>;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    tokens: {
        type: import("@histoire/vendors/vue").PropType<Record<string, string | number | any[] | Record<string, any>>>;
        required: true;
    };
    getName: {
        type: import("@histoire/vendors/vue").PropType<(key: string, value: string | number | any[] | Record<string, any>) => string>;
    };
}>>, {}>;
export declare const HstTokenGrid: import("@histoire/vendors/vue").DefineComponent<{
    getName: {
        type: import("@histoire/vendors/vue").PropType<(key: string, value: string | number | any[] | Record<string, any>) => string>;
    } & {
        default: any;
    };
    colSize: {
        type: import("@histoire/vendors/vue").PropType<number>;
    } & {
        default: number;
    };
    tokens: {
        type: import("@histoire/vendors/vue").PropType<Record<string, string | number | any[] | Record<string, any>>>;
        required: true;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    getName: {
        type: import("@histoire/vendors/vue").PropType<(key: string, value: string | number | any[] | Record<string, any>) => string>;
    } & {
        default: any;
    };
    colSize: {
        type: import("@histoire/vendors/vue").PropType<number>;
    } & {
        default: number;
    };
    tokens: {
        type: import("@histoire/vendors/vue").PropType<Record<string, string | number | any[] | Record<string, any>>>;
        required: true;
    };
}>>, {
    getName: (key: string, value: string | number | any[] | Record<string, any>) => string;
    colSize: number;
}>;
export declare const HstCopyIcon: import("@histoire/vendors/vue").DefineComponent<{
    content: {
        type: import("@histoire/vendors/vue").PropType<string>;
        required: true;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    content: {
        type: import("@histoire/vendors/vue").PropType<string>;
        required: true;
    };
}>>, {}>;
export declare const HstRadio: import("@histoire/vendors/vue").DefineComponent<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<string>;
        required: true;
    };
    options: {
        type: import("@histoire/vendors/vue").PropType<import("./types").HstControlOption[]>;
        required: true;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
    "update:modelValue": (value: string) => void;
}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<string>;
        required: true;
    };
    options: {
        type: import("@histoire/vendors/vue").PropType<import("./types").HstControlOption[]>;
        required: true;
    };
}>> & {
    "onUpdate:modelValue"?: (value: string) => any;
}, {}>;
export declare const HstJson: import("@histoire/vendors/vue").DefineComponent<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<unknown>;
        required: true;
    };
}, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
    'update:modelValue': (newValue: unknown) => true;
}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
    title: {
        type: import("@histoire/vendors/vue").PropType<string>;
    };
    modelValue: {
        type: import("@histoire/vendors/vue").PropType<unknown>;
        required: true;
    };
}>> & {
    "onUpdate:modelValue"?: (newValue: unknown) => any;
}, {}>;
export declare const components: {
    HstButton: import("@histoire/vendors/vue").DefineComponent<{
        color: {
            type: import("@histoire/vendors/vue").PropType<"default" | "flat" | "primary">;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        color: {
            type: import("@histoire/vendors/vue").PropType<"default" | "flat" | "primary">;
        };
    }>>, {}>;
    HstButtonGroup: import("@histoire/vendors/vue").DefineComponent<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<string>;
            required: true;
        };
        options: {
            type: import("@histoire/vendors/vue").PropType<import("./types").HstControlOption[]>;
            required: true;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
        "update:modelValue": (value: string) => void;
    }, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<string>;
            required: true;
        };
        options: {
            type: import("@histoire/vendors/vue").PropType<import("./types").HstControlOption[]>;
            required: true;
        };
    }>> & {
        "onUpdate:modelValue"?: (value: string) => any;
    }, {}>;
    HstCheckbox: import("@histoire/vendors/vue").DefineComponent<{
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<boolean>;
            required: true;
        };
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
        'update:modelValue': (newValue: boolean) => true;
    }, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<boolean>;
            required: true;
        };
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
    }>> & {
        "onUpdate:modelValue"?: (newValue: boolean) => any;
    }, {}>;
    HstCheckboxList: import("@histoire/vendors/vue").DefineComponent<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<string[]>;
            required: true;
        };
        options: {
            type: import("@histoire/vendors/vue").PropType<import("./types").HstControlOption[]>;
            required: true;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
        "update:modelValue": (value: string[]) => void;
    }, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<string[]>;
            required: true;
        };
        options: {
            type: import("@histoire/vendors/vue").PropType<import("./types").HstControlOption[]>;
            required: true;
        };
    }>> & {
        "onUpdate:modelValue"?: (value: string[]) => any;
    }, {}>;
    HstText: import("@histoire/vendors/vue").DefineComponent<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<string>;
            required: true;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
        'update:modelValue': (newValue: string) => true;
    }, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<string>;
            required: true;
        };
    }>> & {
        "onUpdate:modelValue"?: (newValue: string) => any;
    }, {}>;
    HstNumber: import("@histoire/vendors/vue").DefineComponent<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<number>;
            required: true;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
        'update:modelValue': (newValue: number) => true;
    }, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<number>;
            required: true;
        };
    }>> & {
        "onUpdate:modelValue"?: (newValue: number) => any;
    }, {}>;
    HstSlider: import("@histoire/vendors/vue").DefineComponent<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<number>;
            required: true;
        };
        min: {
            type: import("@histoire/vendors/vue").PropType<number>;
            required: true;
        };
        max: {
            type: import("@histoire/vendors/vue").PropType<number>;
            required: true;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
        'update:modelValue': (newValue: number) => true;
    }, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<number>;
            required: true;
        };
        min: {
            type: import("@histoire/vendors/vue").PropType<number>;
            required: true;
        };
        max: {
            type: import("@histoire/vendors/vue").PropType<number>;
            required: true;
        };
    }>> & {
        "onUpdate:modelValue"?: (newValue: number) => any;
    }, {}>;
    HstTextarea: import("@histoire/vendors/vue").DefineComponent<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<string>;
            required: true;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
        'update:modelValue': (newValue: string) => true;
    }, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<string>;
            required: true;
        };
    }>> & {
        "onUpdate:modelValue"?: (newValue: string) => any;
    }, {}>;
    HstSelect: import("@histoire/vendors/vue").DefineComponent<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<string>;
            required: true;
        };
        options: {
            type: import("@histoire/vendors/vue").PropType<Record<string, any> | string[] | import("./types").HstControlOption[]>;
            required: true;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
        "update:modelValue": (value: any) => void;
    }, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<string>;
            required: true;
        };
        options: {
            type: import("@histoire/vendors/vue").PropType<Record<string, any> | string[] | import("./types").HstControlOption[]>;
            required: true;
        };
    }>> & {
        "onUpdate:modelValue"?: (value: any) => any;
    }, {}>;
    HstColorShades: import("@histoire/vendors/vue").DefineComponent<{
        shades: {
            type: import("@histoire/vendors/vue").PropType<Record<string, any>>;
            required: true;
        };
        getName: {
            type: import("@histoire/vendors/vue").PropType<(key: string, color: string) => string>;
        };
        search: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        shades: {
            type: import("@histoire/vendors/vue").PropType<Record<string, any>>;
            required: true;
        };
        getName: {
            type: import("@histoire/vendors/vue").PropType<(key: string, color: string) => string>;
        };
        search: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
    }>>, {}>;
    HstTokenList: import("@histoire/vendors/vue").DefineComponent<{
        tokens: {
            type: import("@histoire/vendors/vue").PropType<Record<string, string | number | any[] | Record<string, any>>>;
            required: true;
        };
        getName: {
            type: import("@histoire/vendors/vue").PropType<(key: string, value: string | number | any[] | Record<string, any>) => string>;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        tokens: {
            type: import("@histoire/vendors/vue").PropType<Record<string, string | number | any[] | Record<string, any>>>;
            required: true;
        };
        getName: {
            type: import("@histoire/vendors/vue").PropType<(key: string, value: string | number | any[] | Record<string, any>) => string>;
        };
    }>>, {}>;
    HstTokenGrid: import("@histoire/vendors/vue").DefineComponent<{
        getName: {
            type: import("@histoire/vendors/vue").PropType<(key: string, value: string | number | any[] | Record<string, any>) => string>;
        } & {
            default: any;
        };
        colSize: {
            type: import("@histoire/vendors/vue").PropType<number>;
        } & {
            default: number;
        };
        tokens: {
            type: import("@histoire/vendors/vue").PropType<Record<string, string | number | any[] | Record<string, any>>>;
            required: true;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        getName: {
            type: import("@histoire/vendors/vue").PropType<(key: string, value: string | number | any[] | Record<string, any>) => string>;
        } & {
            default: any;
        };
        colSize: {
            type: import("@histoire/vendors/vue").PropType<number>;
        } & {
            default: number;
        };
        tokens: {
            type: import("@histoire/vendors/vue").PropType<Record<string, string | number | any[] | Record<string, any>>>;
            required: true;
        };
    }>>, {
        getName: (key: string, value: string | number | any[] | Record<string, any>) => string;
        colSize: number;
    }>;
    HstCopyIcon: import("@histoire/vendors/vue").DefineComponent<{
        content: {
            type: import("@histoire/vendors/vue").PropType<string>;
            required: true;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {}, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        content: {
            type: import("@histoire/vendors/vue").PropType<string>;
            required: true;
        };
    }>>, {}>;
    HstRadio: import("@histoire/vendors/vue").DefineComponent<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<string>;
            required: true;
        };
        options: {
            type: import("@histoire/vendors/vue").PropType<import("./types").HstControlOption[]>;
            required: true;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
        "update:modelValue": (value: string) => void;
    }, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<string>;
            required: true;
        };
        options: {
            type: import("@histoire/vendors/vue").PropType<import("./types").HstControlOption[]>;
            required: true;
        };
    }>> & {
        "onUpdate:modelValue"?: (value: string) => any;
    }, {}>;
    HstJson: import("@histoire/vendors/vue").DefineComponent<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<unknown>;
            required: true;
        };
    }, {}, unknown, {}, {}, import("@histoire/vendors/vue").ComponentOptionsMixin, import("@histoire/vendors/vue").ComponentOptionsMixin, {
        'update:modelValue': (newValue: unknown) => true;
    }, string, import("@histoire/vendors/vue").VNodeProps & import("@histoire/vendors/vue").AllowedComponentProps & import("@histoire/vendors/vue").ComponentCustomProps, Readonly<import("@histoire/vendors/vue").ExtractPropTypes<{
        title: {
            type: import("@histoire/vendors/vue").PropType<string>;
        };
        modelValue: {
            type: import("@histoire/vendors/vue").PropType<unknown>;
            required: true;
        };
    }>> & {
        "onUpdate:modelValue"?: (newValue: unknown) => any;
    }, {}>;
};
export * from './types';
