import { isRef as p, unref as c, watch as l } from "vue";
import { isRef as m, unref as w, watch as y } from "@histoire/vendors/vue";
import { applyState as f } from "@histoire/shared";
const a = (n) => n !== null && typeof n == "object";
function u(n, e = /* @__PURE__ */ new WeakMap()) {
  const t = p(n) ? c(n) : n;
  if (typeof t == "symbol")
    return t.toString();
  if (!a(t))
    return t;
  if (e.has(t))
    return e.get(t);
  if (Array.isArray(t)) {
    const r = [];
    return e.set(t, r), r.push(...t.map((s) => u(s, e))), r;
  } else {
    const r = {};
    return e.set(t, r), h(t, r, e), r;
  }
}
const h = (n, e, t = /* @__PURE__ */ new WeakMap()) => {
  Object.keys(n).forEach((r) => {
    e[r] = u(n[r], t);
  });
};
function i(n, e = /* @__PURE__ */ new WeakMap()) {
  const t = m(n) ? w(n) : n;
  if (typeof t == "symbol")
    return t.toString();
  if (!a(t))
    return t;
  if (e.has(t))
    return e.get(t);
  if (Array.isArray(t)) {
    const r = [];
    return e.set(t, r), r.push(...t.map((s) => i(s, e))), r;
  } else {
    const r = {};
    return e.set(t, r), d(t, r, e), r;
  }
}
const d = (n, e, t = /* @__PURE__ */ new WeakMap()) => {
  Object.keys(n).forEach((r) => {
    e[r] = u(n[r], t);
  });
};
function A(n, e) {
  let t = !1;
  const r = y(() => n, (o) => {
    o != null && (t ? t = !1 : (t = !0, f(e, i(o))));
  }, {
    deep: !0,
    immediate: !0
  }), s = l(() => e, (o) => {
    o != null && (t ? t = !1 : (t = !0, f(n, u(o))));
  }, {
    deep: !0,
    immediate: !0
  });
  return {
    stop() {
      r(), s();
    }
  };
}
export {
  i as _toRawDeep,
  A as syncStateBundledAndExternal,
  u as toRawDeep
};
