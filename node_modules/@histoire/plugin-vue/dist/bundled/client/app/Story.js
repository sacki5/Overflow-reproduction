import { defineComponent as c, getCurrentInstance as d, useAttrs as y, computed as h, provide as f, reactive as S, h as m } from "vue";
import { omitInheritStoryProps as u } from "@histoire/shared";
import l from "./Variant.js";
const g = c({
  name: "Story",
  __histoireType: "story",
  inheritAttrs: !1,
  props: {
    initState: {
      type: Function,
      default: null
    }
  },
  setup() {
    const i = d(), r = y(), n = h(() => r.story);
    f("story", n);
    const s = i.parent, p = {
      $data: s.data
    };
    function e(t, o) {
      typeof o == "function" || (o == null ? void 0 : o.__file) || typeof (o == null ? void 0 : o.render) == "function" || typeof (o == null ? void 0 : o.setup) == "function" || (p[t] = o);
    }
    for (const t in s.exposed)
      e(t, s.exposed[t]);
    for (const t in s.devtoolsRawSetupState)
      e(t, s.devtoolsRawSetupState[t]);
    f("implicitState", () => S({ ...p }));
    function a() {
      Object.assign(r.story, {
        slots: () => i.proxy.$slots
      });
    }
    return {
      story: n,
      updateStory: a
    };
  },
  render() {
    this.updateStory();
    const [i] = this.story.variants;
    if (i.id === "_default")
      return m(l, {
        variant: i,
        initState: this.initState,
        ...this.$attrs
      }, this.$slots);
    let r = 0;
    const n = (p) => {
      var e, a;
      for (const t of p)
        if (((e = t.type) == null ? void 0 : e.__histoireType) === "variant") {
          t.props || (t.props = {}), t.props.variant = this.story.variants[r], !t.props.initState && !t.props["init-state"] && (t.props.initState = this.initState);
          for (const o in this.$attrs)
            typeof t.props[o] > "u" && (t.props[o] = this.$attrs[o]);
          for (const o in this.story)
            !u.includes(o) && typeof t.props[o] > "u" && (t.props[o] = this.story[o]);
          r++;
        } else
          (a = t.children) != null && a.length && n(t.children);
    }, s = this.$slots.default();
    return n(s), s;
  }
});
export {
  g as default
};
