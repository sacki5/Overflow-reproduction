import { Text as W, vModelText as z, vModelSelect as F, vModelRadio as K, vModelCheckbox as D, vModelDynamic as E } from "vue";
import "../node_modules/.pnpm/change-case@4.1.2/node_modules/change-case/dist.es2015/index.js";
import { createAutoBuildingObject as J, indent as L, voidElements as O, serializeJs as U } from "@histoire/shared";
import { pascalCase as G } from "../node_modules/.pnpm/pascal-case@3.1.2/node_modules/pascal-case/dist.es2015/index.js";
async function Y(e) {
  var d, m, h, j, p, _;
  const o = (j = (h = (m = e.slots()).default) == null ? void 0 : h.call(m, { state: (d = e.state) != null ? d : {} })) != null ? j : [], c = Array.isArray(o) ? o : [o], $ = [];
  for (const x in c) {
    const A = c[x];
    $.push(...(await C(A, (_ = (p = e.state) == null ? void 0 : p._hPropState) == null ? void 0 : _[x])).lines);
  }
  return $.join(`
`);
}
async function C(e, o = null) {
  var $, d, m;
  if (e.type === W)
    return {
      lines: [e.children],
      isText: !0
    };
  const c = [];
  if (typeof e.type == "object" || typeof e.type == "string") {
    let h = function(t, s, i = null) {
      var f;
      let l = "";
      for (const a in s.modifiers)
        s.modifiers[a] && (l += `.${a}`);
      let u = "";
      s.arg && (u = `:${s.arg}`), i && (i = i.replace(/^\$(setup|props|data)\./g, ""));
      const n = i ? [i] : V(s.value), y = [], b = `v-${t}${u}${l}="`;
      n.length > 1 ? (y.push(`${b}${n[0]}`), y.push(...n.slice(1, n.length - 1)), y.push(`${n[n.length - 1]}"`), _ = !0) : y.push(`${b}${(f = n[0]) != null ? f : ""}"`), p.push(y);
    }, j = function(t, s) {
      var i, l, u;
      if (typeof s != "string" || ((i = e.dynamicProps) == null ? void 0 : i.includes(t))) {
        let n = ":";
        t.startsWith("on") && (n = "@");
        const y = n === "@" ? `${t[2].toLowerCase()}${t.slice(3)}` : t, b = `onUpdate:${t}`;
        if (n === ":" && ((l = e.dynamicProps) == null ? void 0 : l.includes(b))) {
          x.push(b);
          const k = e.props[b].toString();
          let M;
          const R = /\(\$event\) => (.*?) = \$event/.exec(k);
          R && (M = R[1]);
          const N = `${t === "modelValue" ? "model" : t}Modifiers`, B = (u = e.props[N]) != null ? u : {};
          x.push(N), h("model", {
            arg: t === "modelValue" ? null : t,
            modifiers: B,
            value: s
          }, M);
          return;
        }
        if (typeof s > "u")
          return;
        let f;
        if (typeof s == "string" && s.startsWith("{{") && s.endsWith("}}"))
          f = S(s.substring(2, s.length - 2).trim()).split(`
`);
        else if (typeof s == "function") {
          let a = S(s.toString().replace(/'/g, "\\'").replace(/"/g, "'"));
          const k = /function ([^\s]+)\(/.exec(a);
          k ? f = [k[1]] : (a.startsWith("($event) => ") && (a = a.substring(12)), f = a.split(`
`));
        } else
          f = V(s);
        if (f.length > 1) {
          _ = !0;
          const a = [`${n}${y}="${f[0]}`];
          a.push(...f.slice(1, f.length - 1)), a.push(`${f[f.length - 1]}"`), p.push(a);
        } else
          p.push([`${n}${y}="${f[0]}"`]);
      } else
        p.push([`${t}="${s}"`]);
    };
    (($ = e.type) == null ? void 0 : $.__asyncLoader) && !e.type.__asyncResolved && await e.type.__asyncLoader();
    const p = [];
    let _ = !1;
    const x = [
      "key"
    ];
    if (e.dirs) {
      for (const t of e.dirs)
        if (t.dir === z || t.dir === F || t.dir === K || t.dir === D || t.dir === E) {
          const s = `onUpdate:${(d = t.arg) != null ? d : "modelValue"}`, i = e.props[s];
          let l = null;
          if (i) {
            x.push(s);
            const u = i.toString(), n = /\(\$event\) => (.*?) = \$event/.exec(u);
            n && (l = n[1]);
          }
          h("model", t, l);
        } else if (t.instance._ || t.instance.$) {
          const s = (m = t.instance.$) != null ? m : t.instance._;
          let i;
          for (const l of [s.directives, s.appContext.directives]) {
            for (const u in l)
              if (l[u] === t.dir) {
                i = u;
                break;
              }
            if (i)
              break;
          }
          i && h(i, t);
        }
    }
    for (const t in e.props) {
      if (x.includes(t) || o && t in o)
        continue;
      const s = e.props[t];
      j(t, s);
    }
    if (o)
      for (const t in o)
        j(t, o[t]);
    p.length > 1 && (_ = !0);
    const A = q(e);
    let w = !1;
    const r = [];
    if (typeof e.children == "string")
      A === "pre" ? r.push(e.children) : r.push(...e.children.split(`
`)), w = !0;
    else if (Array.isArray(e.children)) {
      let t;
      for (const s of e.children) {
        const i = await C(s);
        if (i.isText) {
          t === void 0 && (t = !0);
          const l = i.lines[0];
          !r.length || /^\s/.test(l) ? r.push(l.trim()) : r[r.length - 1] += l;
        } else
          t === void 0 && (t = !1), r.push(...i.lines);
      }
      t !== void 0 && (w = t);
    }
    if (e.children && typeof e.children == "object" && !Array.isArray(e.children)) {
      for (const t in e.children)
        if (typeof e.children[t] == "function") {
          const s = J((n) => `{{ ${n} }}`, (n, y) => {
            if (y === "__v_isRef")
              return () => !1;
          }), i = e.children[t](s.proxy), l = [];
          for (const n of i)
            l.push(...(await C(n)).lines);
          const u = Object.keys(s.cache);
          u.length ? (r.push(`<template #${t}="{ ${u.join(", ")} }">`), r.push(...L(l)), r.push("</template>")) : t === "default" ? r.push(...l) : (r.push(`<template #${t}>`), r.push(...L(l)), r.push("</template>"));
        }
    }
    const g = [`<${A}`];
    if (_) {
      for (const t of p)
        g.push(...L(t));
      r.length > 0 && g.push(">");
    } else
      p.length === 1 && (g[0] += ` ${p[0]}`), r.length > 0 && (g[0] += ">");
    const T = O.includes(A.toLowerCase());
    r.length > 0 ? r.length === 1 && g.length === 1 && !p.length && w ? c.push(`${g[0]}${r[0]}</${A}>`) : (c.push(...g), c.push(...L(r)), c.push(`</${A}>`)) : g.length > 1 ? (c.push(...g), c.push(T ? ">" : "/>")) : c.push(`${g[0]}${T ? "" : " /"}>`);
  } else if ((e == null ? void 0 : e.shapeFlag) & 1 << 4)
    for (const h of e.children)
      c.push(...(await C(h)).lines);
  return {
    lines: c
  };
}
function q(e) {
  var o, c, $, d, m;
  if (typeof e.type == "string")
    return e.type;
  if ((o = e.type) != null && o.__asyncResolved) {
    const h = (c = e.type) == null ? void 0 : c.__asyncResolved;
    return ($ = h.name) != null ? $ : P(h.__file);
  } else {
    if ((d = e.type) != null && d.name)
      return e.type.name;
    if ((m = e.type) != null && m.__file)
      return P(e.type.__file);
  }
  return "Anonymous";
}
function P(e) {
  const o = /([^/]+)\.vue$/.exec(e);
  return o ? G(o[1]) : "Anonymous";
}
function V(e) {
  const o = !!(e != null && e.__autoBuildingObject), c = U(e);
  return o ? [S(c.__autoBuildingObjectGetKey)] : S(c).split(`
`);
}
function S(e) {
  return e.replace(/\$setup\./g, "");
}
export {
  Y as generateSourceCode,
  q as getTagName
};
