import { defineComponent as s, useAttrs as d, inject as f, provide as a, onMounted as y } from "vue";
const c = { name: "StubbedComponent", render: () => null };
function i(t) {
  for (const e of t)
    typeof e.type == "object" && e.type.name !== "HistoireVariant" && (e.type = c), Array.isArray(e.children) && i(e.children);
}
const g = s({
  name: "HistoireStory",
  inheritAttrs: !1,
  props: {
    title: {
      type: String,
      default: null
    },
    id: {
      type: String,
      default: null
    },
    group: {
      type: String,
      default: null
    },
    layout: {
      type: Object,
      default: null
    },
    icon: {
      type: String,
      default: null
    },
    iconColor: {
      type: String,
      default: null
    },
    docsOnly: {
      type: Boolean,
      default: !1
    }
  },
  setup(t) {
    var o, l;
    const e = d(), n = {
      id: (o = t.id) != null ? o : e.data.id,
      title: (l = t.title) != null ? l : e.data.fileName,
      group: t.group,
      layout: t.layout,
      icon: t.icon,
      iconColor: t.iconColor,
      docsOnly: t.docsOnly,
      variants: []
    }, r = f("addStory", null);
    return r == null || r(n), a("story", n), a("addVariant", (u) => {
      n.variants.push(u);
    }), y(() => {
      n.variants.length || n.variants.push({
        id: "_default",
        title: "default"
      });
    }), {
      story: n
    };
  },
  render() {
    var e, n;
    let t = !1;
    try {
      const r = (n = (e = this.$slots).default) == null ? void 0 : n.call(e, {
        get state() {
          return t = !0, {};
        }
      });
      return Array.isArray(r) && i(r), r;
    } catch (r) {
      return t || console.error(r), null;
    }
  }
});
export {
  g as default
};
